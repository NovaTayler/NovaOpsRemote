// src/components/QuantumEncryption.jsx
import React, { useState } from 'react';
import axios from 'axios';
import { Lock, RefreshCw } from 'lucide-react';
import { CONFIG } from '../App';

const QuantumEncryption = () => {
  const [operation, setOperation] = useState('encrypt');
  const [label, setLabel] = useState('');
  const [data, setData] = useState('');
  const [result, setResult] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  const executeOperation = async () => {
    setLoading(true);
    setError('');
    try {
      if (operation === 'encrypt') {
        let parsedData;
        try {
          parsedData = JSON.parse(data);
        } catch (e) {
          throw new Error('Invalid JSON data');
        }
        const response = await axios.post(`${CONFIG.API_URL}/api/crypto/encrypt`, { label, data: parsedData });
        setResult(response.data.ciphertext);
      } else {
        setResult('Decryption not implemented in this version');
      }
    } catch (error) {
      setError(error.response?.data?.detail || error.message || 'Operation failed');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="space-y-6">
      <div className="bg-gray-800 rounded-2xl p-6 border border-gray-700">
        <div className="flex items-center justify-between mb-6">
          <h3 className="text-lg font-bold text-white flex items-center">
            <Lock className="w-5 h-5 mr-2 text-purple-400" />
            Quantum Encryption Engine
          </h3>
          <button
            onClick={() => setOperation(operation === 'encrypt' ? 'decrypt' : 'encrypt')}
            className="px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors"
            aria-label={`Switch to ${operation === 'encrypt' ? 'Decrypt' : 'Encrypt'} mode`}
          >
            {operation === 'encrypt' ? 'Encrypt Mode' : 'Decrypt Mode'}
          </button>
        </div>
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          <div className="space-y-4">
            {operation === 'encrypt' && (
              <div>
                <label className="block text-gray-400 text-sm mb-2" htmlFor="label">Label</label>
                <input
                  type="text"
                  id="label"
                  value={label}
                  onChange={(e) => setLabel(e.target.value)}
                  className="w-full px-3 py-2 bg-gray-900 border border-gray-600 rounded-lg text-white focus:border-purple-500 focus:outline-none"
                  placeholder="Vault label"
                />
              </div>
            )}
            <div>
              <label className="block text-gray-400 text-sm mb-2" htmlFor="data">
                {operation === 'encrypt' ? 'Plaintext Data' : 'Encrypted Data'}
              </label>
              <textarea
                id="data"
                value={data}
                onChange={(e) => setData(e.target.value)}
                className="w-full px-3 py-2 bg-gray-900 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:border-purple-500 focus:outline-none h-32 resize-none font-mono text-sm"
                placeholder={operation === 'encrypt' ? 'Enter JSON data (e.g., {"message": "secret"})' : 'Enter encrypted data...'}
              />
            </div>
            {error && (
              <div className="bg-red-500/20 border border-red-500/50 rounded-lg p-3 text-red-200 text-sm">
                {error}
              </div>
            )}
            <button
              onClick={executeOperation}
              disabled={loading || !data || (operation === 'encrypt' && !label)}
              className="w-full bg-gradient-to-r from-purple-600 to-indigo-600 text-white py-3 px-4 rounded-lg hover:from-purple-700 hover:to-indigo-700 disabled:opacity-50 transition-all duration-200"
            >
              {loading ? (
                <div className="flex items-center justify-center">
                  <RefreshCw className="w-4 h-4 animate-spin mr-2" />
                  Processing...
                </div>
              ) : (
                `${operation.charAt(0).toUpperCase() + operation.slice(1)} Data`
              )}
            </button>
          </div>
          <div className="space-y-4">
            <div>
              <label className="block text-gray-400 text-sm mb-2" htmlFor="result">Result</label>
              <textarea
                id="result"
                value={result}
                readOnly
                className="w-full px-3 py-2 bg-gray-900 border border-gray-600 rounded-lg text-white h-32 resize-none font-mono text-sm"
                placeholder="Result will appear here..."
              />
            </div>
            <div className="bg-gray-900 rounded-lg p-4">
              <h4 className="text-white font-medium mb-2">Operation Details</h4>
              <div className="space-y-1 text-sm">
                <div className="flex justify-between">
                  <span className="text-gray-400">Algorithm:</span>
                  <span className="text-white">Kyber (Quantum-safe)</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-400">Mode:</span>
                  <span className="text-white capitalize">{operation}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-400">Key Size:</span>
                  <span className="text-white">512-bit</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-400">Quantum Safe:</span>
                  <span className="text-green-400">Yes</span>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default QuantumEncryption;