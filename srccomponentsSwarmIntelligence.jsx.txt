// src/components/SwarmIntelligence.jsx
import React, { useState } from 'react';
import axios from 'axios';
import { Users, RefreshCw } from 'lucide-react';
import { CONFIG } from '../App';

const SwarmIntelligence = () => {
  const [problem, setProblem] = useState('');
  const [dimensions, setDimensions] = useState('');
  const [agents, setAgents] = useState('');
  const [swarmId, setSwarmId] = useState('');
  const [result, setResult] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  const createSwarm = async () => {
    setLoading(true);
    setError('');
    try {
      const response = await axios.post(`${CONFIG.API_URL}/api/swarm/create`, {
        problem,
        dimensions: parseInt(dimensions),
        agents: parseInt(agents)
      });
      setResult(JSON.stringify(response.data, null, 2));
    } catch (error) {
      setError(error.response?.data?.detail || error.message || 'Operation failed');
    } finally {
      setLoading(false);
    }
  };

  const stepSwarm = async () => {
    setLoading(true);
    setError('');
    try {
      const response = await axios.post(`${CONFIG.API_URL}/api/swarm/step`, {}, { params: { swarm_id: swarmId } });
      setResult(JSON.stringify(response.data, null, 2));
    } catch (error) {
      setError(error.response?.data?.detail || error.message || 'Operation failed');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="space-y-6">
      <div className="bg-gray-800 rounded-2xl p-6 border border-gray-700">
        <div className="flex items-center justify-between mb-6">
          <h3 className="text-lg font-bold text-white flex items-center">
            <Users className="w-5 h-5 mr-2 text-yellow-400" />
            Swarm Intelligence
          </h3>
        </div>
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          <div className="space-y-4">
            <div>
              <label className="block text-gray-400 text-sm mb-2" htmlFor="problem">Problem</label>
              <input
                type="text"
                id="problem"
                value={problem}
                onChange={(e) => setProblem(e.target.value)}
                className="w-full px-3 py-2 bg-gray-900 border border-gray-600 rounded-lg text-white focus:border-yellow-500 focus:outline-none"
                placeholder="Problem (e.g., sphere, rastrigin)"
              />
            </div>
            <div>
              <label className="block text-gray-400 text-sm mb-2" htmlFor="dimensions">Dimensions</label>
              <input
                type="number"
                id="dimensions"
                value={dimensions}
                onChange={(e) => setDimensions(e.target.value)}
                className="w-full px-3 py-2 bg-gray-900 border border-gray-600 rounded-lg text-white focus:border-yellow-500 focus:outline-none"
                placeholder="Dimensions"
              />
            </div>
            <div>
              <label className="block text-gray-400 text-sm mb-2" htmlFor="agents">Agents</label>
              <input
                type="number"
                id="agents"
                value={agents}
                onChange={(e) => setAgents(e.target.value)}
                className="w-full px-3 py-2 bg-gray-900 border border-gray-600 rounded-lg text-white focus:border-yellow-500 focus:outline-none"
                placeholder="Agents"
              />
            </div>
            <button
              onClick={createSwarm}
              disabled={loading || !problem || !dimensions || !agents}
              className="w-full bg-gradient-to-r from-yellow-600 to-orange-600 text-white py-3 px-4 rounded-lg hover:from-yellow-700 hover:to-orange-700 disabled:opacity-50 transition-all duration-200"
            >
              {loading ? (
                <div className="flex items-center justify-center">
                  <RefreshCw className="w-4 h-4 animate-spin mr-2" />
                  Creating...
                </div>
              ) : (
                'Create Swarm'
              )}
            </button>
            <div>
              <label className="block text-gray-400 text-sm mb-2" htmlFor="swarmId">Swarm ID</label>
              <input
                type="text"
                id="swarmId"
                value={swarmId}
                onChange={(e) => setSwarmId(e.target.value)}
                className="w-full px-3 py-2 bg-gray-900 border border-gray-600 rounded-lg text-white focus:border-yellow-500 focus:outline-none"
                placeholder="Swarm ID"
              />
            </div>
            <button
              onClick={stepSwarm}
              disabled={loading || !swarmId}
              className="w-full bg-gradient-to-r from-yellow-600 to-orange-600 text-white py-3 px-4 rounded-lg hover:from-yellow-700 hover:to-orange-700 disabled:opacity-50 transition-all duration-200"
            >
              {loading ? (
                <div className="flex items-center justify-center">
                  <RefreshCw className="w-4 h-4 animate-spin mr-2" />
                  Stepping...
                </div>
              ) : (
                'Step Swarm'
              )}
            </button>
            {error && (
              <div className="bg-red-500/20 border border-red-500/50 rounded-lg p-3 text-red-200 text-sm">
                {error}
              </div>
            )}
          </div>
          <div className="space-y-4">
            <div>
              <label className="block text-gray-400 text-sm mb-2" htmlFor="swarmResult">Result</label>
              <textarea
                id="swarmResult"
                value={result}
                readOnly
                className="w-full px-3 py-2 bg-gray-900 border border-gray-600 rounded-lg text-white h-32 resize-none font-mono text-sm"
                placeholder="Result will appear here..."
              />
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default SwarmIntelligence;